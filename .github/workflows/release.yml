name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test:
    name: Run Tests and Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      - name: Run tests
        run: cargo test

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

  build:
    needs: test
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: tide-linux-x86_64
            use_cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: tide-macos-x86_64
            use_cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: tide-macos-arm64
            use_cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: tide-windows-x86_64.exe
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross (if needed)
        if: matrix.use_cross
        run: cargo install cross

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare binary
        shell: bash
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Copy binary to dist with proper name
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/${{ matrix.target }}/release/tide.exe dist/${{ matrix.binary_name }}
          else
            cp target/${{ matrix.target }}/release/tide dist/${{ matrix.binary_name }}
          fi
          
          # Strip binary to reduce size (except Windows)
          if [ "${{ runner.os }}" != "Windows" ]; then
            strip dist/${{ matrix.binary_name }} || true
          fi
          
          # Create checksum
          cd dist
          if [ "${{ runner.os }}" == "Windows" ]; then
            certutil -hashfile ${{ matrix.binary_name }} SHA256 > ${{ matrix.binary_name }}.sha256
            # Clean up the certutil output to just show the hash
            powershell "(Get-Content ${{ matrix.binary_name }}.sha256 | Select-Object -Skip 1 | Select-Object -First 1).Trim() > ${{ matrix.binary_name }}.sha256.tmp"
            powershell "Move-Item -Force ${{ matrix.binary_name }}.sha256.tmp ${{ matrix.binary_name }}.sha256"
          else
            shasum -a 256 ${{ matrix.binary_name }} > ${{ matrix.binary_name }}.sha256
          fi

      - name: Run smoke test
        shell: bash
        run: |
          # Make binary executable (not needed for Windows)
          if [ "${{ runner.os }}" != "Windows" ]; then
            chmod +x dist/${{ matrix.binary_name }}
          fi
          
          # Run with --help to verify it works
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/${{ matrix.binary_name }} --help || exit 1
          else
            ./dist/${{ matrix.binary_name }} --help || exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            dist/${{ matrix.binary_name }}
            dist/${{ matrix.binary_name }}.sha256
          if-no-files-found: error

  auto-release:
    name: Auto Create Release
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: v$VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ðŸš€ **Automated Release**
            
            This release was automatically created after all tests passed and builds succeeded.
            
            ## Download Pre-built Binaries
            
            - **Linux (x86_64)**: `tide-linux-x86_64`
            - **macOS (Intel)**: `tide-macos-x86_64`
            - **macOS (Apple Silicon)**: `tide-macos-arm64`
            - **Windows**: `tide-windows-x86_64.exe`
            
            See the [README](https://github.com/ao/tide#quick-installation) for installation instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-release:
    name: Create Tagged Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release v${{ env.VERSION }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ðŸš€ **Release v${{ env.VERSION }}**
            
            ## Download Pre-built Binaries
            
            - **Linux (x86_64)**: `tide-linux-x86_64`
            - **macOS (Intel)**: `tide-macos-x86_64`
            - **macOS (Apple Silicon)**: `tide-macos-arm64`
            - **Windows**: `tide-windows-x86_64.exe`
            
            See the [README](https://github.com/ao/tide#quick-installation) for installation instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-formula:
    name: Update Homebrew Formula
    needs: tag-release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Explicitly checkout main branch
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Download source tarball and calculate SHA256
        run: |
          # Download source tarball and calculate its SHA256
          curl -L -o source.tar.gz https://github.com/ao/tide/archive/refs/tags/v${VERSION}.tar.gz
          echo "SOURCE_SHA=$(sha256sum source.tar.gz | awk '{print $1}')" >> $GITHUB_ENV
      
      - name: Update Formula
        run: |
          # Create a Ruby script to update the formula
          cat > update_formula.rb << 'EOL'
          #!/usr/bin/env ruby
          
          version = ENV['VERSION']
          source_sha = ENV['SOURCE_SHA']
          
          formula_path = 'Formula/tide.rb'
          content = File.read(formula_path)
          
          # Update version in URL
          content.gsub!(/url ".*\/v.*\.tar\.gz"/, "url \"https://github.com/ao/tide/archive/refs/tags/v#{version}.tar.gz\"")
          
          # Update SHA256 checksum
          content.gsub!(/sha256 ".*"/, "sha256 \"#{source_sha}\"")
          
          # Update version in test
          content.gsub!(/assert_match "tide [^"]*"/, "assert_match \"tide #{version}\"")
          
          File.write(formula_path, content)
          EOL
          
          chmod +x update_formula.rb
          ruby update_formula.rb
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Commit and push changes
        run: |
          git add Formula/tide.rb
          git commit -m "Update formula for v${{ env.VERSION }}"
          git push origin main